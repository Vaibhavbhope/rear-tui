#!/usr/bin/env bash
# ReaR TUI: Single merged script
set -euo pipefail

TMPDIR=$(mktemp -d)
trap "rm -rf $TMPDIR" EXIT

########################################################
# === config-shared ===
########################################################

declare -A CONFIG_VALUES=()

CONFIG_VALUES["OUTPUT"]=""
CONFIG_VALUES["OUTPUT_URL"]=""
CONFIG_VALUES["BACKUP"]=""
CONFIG_VALUES["BACKUP_URL"]=""
CONFIG_VALUES["VG_LINE"]=""
CONFIG_VALUES["USE_STATIC_NETWORKING"]=""
CONFIG_VALUES["BOOTLOADER"]=""
CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]=""
CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]=""
CONFIG_VALUES["OUTPUT_OPTIONS"]=""
CONFIG_VALUES["BACKUP_OPTIONS"]=""
CONFIG_VALUES["BOOT_MODE"]=""

############ ensure rear installed #############################
ensure_rear_installed() {
    if ! command -v rear >/dev/null 2>&1; then
        whiptail --title "ReaR Missing" \
                 --msgbox "The 'rear' package is not installed on this system.\n\nPlease install it first:\n\n  yum install rear\n\nThen run this script again." 12 60
        exit 1
    fi
}

ensure_rear_installed

OUTCONF="/etc/rear/rear-tui.conf"

####################### ensure config file exists ##################
ensure_config_file() {
    if [ ! -f "$OUTCONF" ]; then
        {
            echo "# Generated by ReaR TUI"
            echo "# Created on $(date)"
        } > "$OUTCONF"
    fi
}

ensure_config_file

show_config_saved() {
    local category="$1"
    local message="$2"
    whiptail --title "$category Configuration" --msgbox "$message" 10 60
}

check_whiptail() {
    if ! command -v whiptail >/dev/null 2>&1; then
        echo "This script requires 'whiptail'. Install newt package and re-run."
        exit 1
    fi
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        whiptail --title "Permissions" --msgbox "Please run this script as root (sudo)." 8 50
        exit 1
    fi
}

save_final_configuration() {   
        {
        echo "# Generated by ReaR TUI"
        [ -n "${CONFIG_VALUES["OUTPUT"]}" ] && echo "OUTPUT=${CONFIG_VALUES["OUTPUT"]}"
        [ -n "${CONFIG_VALUES["OUTPUT_URL"]}" ] && echo "OUTPUT_URL=${CONFIG_VALUES["OUTPUT_URL"]}"
        [ -n "${CONFIG_VALUES["BACKUP"]}" ] && echo "BACKUP=${CONFIG_VALUES["BACKUP"]}"
        [ -n "${CONFIG_VALUES["BACKUP_URL"]}" ] && echo "BACKUP_URL=${CONFIG_VALUES["BACKUP_URL"]}"
        [ -n "${CONFIG_VALUES["VG_LINE"]}" ] && echo "${CONFIG_VALUES["VG_LINE"]}"
        [ -n "${CONFIG_VALUES["USE_STATIC_NETWORKING"]}" ] && echo "USE_STATIC_NETWORKING=${CONFIG_VALUES["USE_STATIC_NETWORKING"]}"
        [ -n "${CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]}" ] && echo "${CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]}"
        [ -n "${CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]}" ] && echo "${CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]}"
        [ -n "${CONFIG_VALUES["OUTPUT_OPTIONS"]}" ] && echo "${CONFIG_VALUES["OUTPUT_OPTIONS"]}"
        [ -n "${CONFIG_VALUES["BACKUP_OPTIONS"]}" ] && echo "${CONFIG_VALUES["BACKUP_OPTIONS"]}"
        
        case "${CONFIG_VALUES["BOOTLOADER"]}" in
            UEFI)
                echo "UEFI_BOOTLOADER=/boot/efi/EFI/redhat/grubx64.efi"
                echo "SECURE_BOOT_BOOTLOADER=/boot/efi/EFI/redhat/shimx64.efi"
                ;;
        esac
    } > "$OUTCONF"

    CONF_MSG="Settings saved to $OUTCONF:\n\n"
    [ -n "${CONFIG_VALUES["OUTPUT"]}" ] && CONF_MSG="${CONF_MSG}OUTPUT=${CONFIG_VALUES["OUTPUT"]}\n"
    [ -n "${CONFIG_VALUES["OUTPUT_URL"]}" ] && CONF_MSG="${CONF_MSG}OUTPUT_URL=${CONFIG_VALUES["OUTPUT_URL"]}\n"
    [ -n "${CONFIG_VALUES["BACKUP"]}" ] && CONF_MSG="${CONF_MSG}BACKUP=${CONFIG_VALUES["BACKUP"]}\n"
    [ -n "${CONFIG_VALUES["BACKUP_URL"]}" ] && CONF_MSG="${CONF_MSG}BACKUP_URL=${CONFIG_VALUES["BACKUP_URL"]}\n"
    [ -n "${CONFIG_VALUES["VG_LINE"]}" ] && CONF_MSG="${CONF_MSG}${CONFIG_VALUES["VG_LINE"]}\n"
    [ -n "${CONFIG_VALUES["USE_STATIC_NETWORKING"]}" ] && CONF_MSG="${CONF_MSG}USE_STATIC_NETWORKING=${CONFIG_VALUES["USE_STATIC_NETWORKING"]}\n"
    [ -n "${CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]}" ] && CONF_MSG="${CONF_MSG}${CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]}\n"
    [ -n "${CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]}" ] && CONF_MSG="${CONF_MSG}${CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]}\n"
    [ -n "${CONFIG_VALUES["OUTPUT_OPTIONS"]}" ] && CONF_MSG="${CONF_MSG}${CONFIG_VALUES["OUTPUT_OPTIONS"]}\n"
    [ -n "${CONFIG_VALUES["BACKUP_OPTIONS"]}" ] && CONF_MSG="${CONF_MSG}${CONFIG_VALUES["BACKUP_OPTIONS"]}\n"

    case "${CONFIG_VALUES["BOOTLOADER"]}" in
        UEFI)
            CONF_MSG="${CONF_MSG}UEFI_BOOTLOADER=/boot/efi/EFI/redhat/grubx64.efi\n"
            CONF_MSG="${CONF_MSG}SECURE_BOOT_BOOTLOADER=/boot/efi/EFI/redhat/shimx64.efi\n"
            ;;
    esac

    whiptail --title "Configuration Saved" --msgbox "$CONF_MSG" 20 70
    return 0
}

########################################################
# === cifs-message ===
########################################################
cifs_message() {
    CIFS_MESSAGE="To use CIFS, please create the credentials file /etc/rear/cifs with the following format:\n\n\
username=_username_\n\
password=_secret password_\n\
domain=_domain_\n\n\
Also ensure:\n\
BACKUP_OPTIONS=\"cred=/etc/rear/cifs\"\n\
OUTPUT_OPTIONS=\"cred=/etc/rear/cifs\"\n\
are present in /etc/rear/rear_tui.conf"

    whiptail --title "CIFS Credentials Required" --msgbox "$CIFS_MESSAGE" 20 80
}

########################################################
# === config-output ===
########################################################
config_output_menu() {
    while true; do
        OUTPUT=$(whiptail --title "OUTPUT Type" --menu "Select OUTPUT (rescue image type)" 20 70 10 \
            "RAMDISK" "Only creates the ReaR initramfs" \
            "ISO"     "Create ISO image" \
            "PXE"     "PXE boot files for network booting" \
            "OBDR"    "One Button Disaster Recovery tape" \
            "USB"     "Bootable USB disk" \
            "RAWDISK" "Bootable raw disk image" \
            "BACK"    "← Back to Configuration Menu" \
            3>&1 1>&2 2>&3)
        
        case "$OUTPUT" in
            "BACK"|"") return 0 ;;
            *)
                CONFIG_VALUES["OUTPUT"]="$OUTPUT"
                while true; do
                    OUTPUT_URL_BASE=$(whiptail --title "OUTPUT_URL" --menu "Where should the rescue image go?" 20 70 10 \
                        "null"    "Backup Embedded in ISO" \
                        "file://"  "Save locally (/var/lib/rear/output/...)" \
                        "nfs://"   "Send via NFS" \
                        "cifs://"  "Send via CIFS" \
                        "rsync://" "Send via rsync" \
                        "sshfs://" "Send via SSH"  \
                        "BACK"    "← Back to OUTPUT Type" \
                        3>&1 1>&2 2>&3)
                    
                    case "$OUTPUT_URL_BASE" in
                        "BACK"|"") break ;;
                        "cifs://")
                            cifs_message
                            ;&
                        *)
                            OUTPUT_URL=$(whiptail --inputbox "Enter full path or URL for OUTPUT_URL (leave blank to keep base)" 10 70 "$OUTPUT_URL_BASE" 3>&1 1>&2 2>&3)
                            if [ $? -eq 0 ]; then
                                OUTPUT_URL=${OUTPUT_URL:-$OUTPUT_URL_BASE}
                                CONFIG_VALUES["OUTPUT_URL"]="$OUTPUT_URL"
                                if [[ "$OUTPUT_URL" == "cifs://"* ]]; then
                                    CONFIG_VALUES["OUTPUT_OPTIONS"]="OUTPUT_OPTIONS=\"cred=/etc/rear/cifs\""
                                fi
                                show_config_saved "OUTPUT" "OUTPUT settings saved:\n\nOUTPUT=$OUTPUT\nOUTPUT_URL=$OUTPUT_URL"
                                return 0
                            fi
                            ;;
                    esac
                done
                ;;
        esac
    done
}


########################################################
# === config-backup ===
########################################################
config_backup_menu() {
    while true; do
        BACKUP=$(whiptail --title "BACKUP Method" --menu "Select BACKUP method" 20 70 10 \
            "NETFS"    "Backup to NFS/SSHFS/CIFS/RSYNC" \
            "EXTERNAL" "External USB disk" \
            "RSYNC"    "rsync mirror" \
            "TAR"      "tar archive" \
            "DP"       "Data Protector" \
            "NONE"     "No backup, rescue only" \
            "BACK"     "← Back to Configuration Menu" \
            3>&1 1>&2 2>&3)

        case "$BACKUP" in
            "BACK"|"") return 0 ;;
            *)
                CONFIG_VALUES["BACKUP"]="$BACKUP"
                while true; do
                    BACKUP_URL_BASE=$(whiptail --title "BACKUP_URL" --menu "Where should the backup go?" 20 70 10 \
                        "iso://"   "Embedded inside ISO/USB" \
                        "file://"  "Local directory" \
                        "nfs://"   "Network File System" \
                        "cifs://"  "Windows CIFS/SMB Share" \
                        "rsync://" "Rsync server" \
                        "sshfs://" "SSH Filesystem" \
                        "BACK"    "← Back to BACKUP Method" \
                        3>&1 1>&2 2>&3)

                    case "$BACKUP_URL_BASE" in
                        "BACK"|"") break ;;
                        "cifs://")
                            cifs_message
                            ;&
                        *)
                            BACKUP_URL=$(whiptail --inputbox "Enter full path or URL for BACKUP_URL (leave blank to keep base)" 10 70 "$BACKUP_URL_BASE" 3>&1 1>&2 2>&3)
                            if [ $? -eq 0 ]; then
                                BACKUP_URL=${BACKUP_URL:-$BACKUP_URL_BASE}
                                CONFIG_VALUES["BACKUP_URL"]="$BACKUP_URL"
                                if [[ "$BACKUP_URL" == "cifs://"* ]]; then
                                    CONFIG_VALUES["BACKUP_OPTIONS"]="BACKUP_OPTIONS=\"cred=/etc/rear/cifs\""
                                fi
                                show_config_saved "BACKUP" "BACKUP settings saved:\n\nBACKUP=$BACKUP\nBACKUP_URL=$BACKUP_URL"
                                return 0
                            fi
                            ;;
                    esac
                done
                ;;
        esac
    done
}

########################################################
# === config-vg ===
########################################################
config_vg_menu() {
    VG_LINE=$(whiptail --inputbox "Enter Volume Group(s) to include (comma-separated, leave blank for all)" 10 70 "${CONFIG_VALUES["VG_LINE"]}" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        if [ -n "$VG_LINE" ]; then
            CONFIG_VALUES["VG_LINE"]="VG=$VG_LINE"
            show_config_saved "VG" "Volume Group setting saved:\n\nVG=$VG_LINE"
        else
            CONFIG_VALUES["VG_LINE"]=""
            show_config_saved "VG" "VG setting cleared (all VGs included)"
        fi
    fi
}

########################################################
# === config-bootloader ===
########################################################
config_bootloader_menu() {
    BOOT_MODE=$(whiptail --title "Bootloader" --menu "Select Bootloader mode" 15 70 4 \
        "BIOS" "Legacy BIOS bootloader" \
        "UEFI" "UEFI bootloader (grubx64.efi)" \
        "BACK" "← Back to Configuration Menu" \
        3>&1 1>&2 2>&3)

    case "$BOOT_MODE" in
        "BACK"|"") return 0 ;;
        "BIOS")
            CONFIG_VALUES["BOOTLOADER"]="BIOS"
            CONFIG_VALUES["BOOT_MODE"]="BIOS"
            show_config_saved "Bootloader" "Bootloader set to BIOS"
            ;;
        "UEFI")
            CONFIG_VALUES["BOOTLOADER"]="UEFI"
            CONFIG_VALUES["BOOT_MODE"]="UEFI"
            show_config_saved "Bootloader" "Bootloader set to UEFI (grubx64.efi)"
            ;;
    esac
}

########################################################
# === config-networking ===
########################################################
config_networking_menu() {
    USE_STATIC=$(whiptail --title "Networking" --menu "Configure networking method" 15 70 3 \
        "YES" "Use static networking" \
        "NO"  "Use DHCP (default)" \
        "BACK" "← Back to Configuration Menu" \
        3>&1 1>&2 2>&3)

    case "$USE_STATIC" in
        "BACK"|"") return 0 ;;
        "YES")
            CONFIG_VALUES["USE_STATIC_NETWORKING"]="YES"
            show_config_saved "Networking" "Static networking enabled"
            ;;
        "NO")
            CONFIG_VALUES["USE_STATIC_NETWORKING"]="NO"
            show_config_saved "Networking" "Networking set to DHCP"
            ;;
    esac
}

########################################################
# === config-multipath ===
########################################################
config_multipath_menu() {
    AUTOEXCLUDE=$(whiptail --title "Multipath" --menu "Configure multipath exclusion" 15 70 3 \
        "AUTOEXCLUDE_MULTIPATH=y" "Exclude multipath devices automatically" \
        "AUTOEXCLUDE_MULTIPATH=n" "Do not exclude multipath devices" \
        "BACK" "← Back to Configuration Menu" \
        3>&1 1>&2 2>&3)

    case "$AUTOEXCLUDE" in
        "BACK"|"") return 0 ;;
        *)
            CONFIG_VALUES["AUTOEXCLUDE_MULTIPATH"]="$AUTOEXCLUDE"
            show_config_saved "Multipath" "Multipath configuration saved:\n\n$AUTOEXCLUDE"
            ;;
    esac
}

########################################################
# === config-keepoldbackup ===
########################################################
config_keepoldbackup_menu() {
    KEEP=$(whiptail --title "Keep Old Backup" --menu "Configure whether to keep old backup copy" 15 70 3 \
        "NETFS_KEEP_OLD_BACKUP_COPY=y" "Keep previous backup copy" \
        "NETFS_KEEP_OLD_BACKUP_COPY=n" "Do not keep old backup copy" \
        "BACK" "← Back to Configuration Menu" \
        3>&1 1>&2 2>&3)

    case "$KEEP" in
        "BACK"|"") return 0 ;;
        *)
            CONFIG_VALUES["NETFS_KEEP_OLD_BACKUP_COPY"]="$KEEP"
            show_config_saved "Keep Old Backup" "Setting saved:\n\n$KEEP"
            ;;
    esac
}

########################################################
# === edit-config ===
########################################################
edit_configuration() {
    while true; do
        OPTION=$(whiptail --title "Edit Configuration" --menu "Select a category to configure" 20 70 10 \
            "1" "Configure OUTPUT (rescue image)" \
            "2" "Configure BACKUP method" \
            "3" "Configure Volume Group" \
            "4" "Configure Bootloader" \
            "5" "Configure Networking" \
            "6" "Configure Multipath" \
            "7" "Configure Keep Old Backup" \
            "8" "Save and Return to Main Menu" \
            "9" "Cancel and Return to Main Menu" \
            3>&1 1>&2 2>&3)

        case "$OPTION" in
            1) config_output_menu ;;
            2) config_backup_menu ;;
            3) config_vg_menu ;;
            4) config_bootloader_menu ;;
            5) config_networking_menu ;;
            6) config_multipath_menu ;;
            7) config_keepoldbackup_menu ;;
            8) save_final_configuration; return ;;
            9) return ;;
            *) return ;;
        esac
    done
}

########################################################
# === view-config ===
########################################################
view_configuration() {
    if [ ! -f "$OUTCONF" ]; then
        if whiptail --title "Configuration Missing" --yesno \
            "No configuration file found at:\n\n$OUTCONF\n\nDo you want to create it now?" 12 70; then
            save_final_configuration
        else
            return
        fi
    fi

    if [ -f "$OUTCONF" ]; then
        whiptail --title "Current Configuration" --textbox "$OUTCONF" 25 80
    else
        whiptail --title "Configuration Error" --msgbox "Failed to create configuration file." 10 60
    fi
}

########################################################
# === rear-tui (Main Menu) ===
########################################################

# Ensure dependencies and permissions
check_whiptail
check_root

# ---- Main Menu ----
while true; do
    CHOICE=$(whiptail --title "ReaR Backup" \
        --menu "Choose an action" 20 70 10 \
        "1" "Create rescue media and backup the system" \
        "2" "Create only Backup" \
        "3" "Create rescue media only" \
        "4" "Edit Configuration" \
        "5" "View Current Configuration" \
        "6" "Exit" \
        3>&1 1>&2 2>&3)

    if [ $? -ne 0 ]; then
        exit 0
    fi

    case $CHOICE in
        1)
            if whiptail --title "Confirm" --yesno \
                "Do you want to run:\n\nrear -dDv -C $OUTCONF mkbackup ?" 12 70; then
                rear -dDv -C "$OUTCONF" mkbackup
            fi
            ;;
        2)
            if whiptail --title "Confirm" --yesno \
                "Do you want to run:\n\nrear -dDv -C $OUTCONF mkbackuponly ?" 12 70; then
                rear -dDv -C "$OUTCONF" mkbackuponly
            fi
            ;;
        3)
            if whiptail --title "Confirm" --yesno \
                "Do you want to run:\n\nrear -dDv -C $OUTCONF mkrescue ?" 12 70; then
                rear -dDv -C "$OUTCONF" mkrescue
            fi
            ;;
        4) edit_configuration ;;
        5) view_configuration ;;
        6) exit 0 ;;
        *) break ;;
    esac
done


